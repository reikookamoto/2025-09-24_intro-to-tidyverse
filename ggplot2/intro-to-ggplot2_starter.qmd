---
title: "Introduction to ggplot2"
author: "Reiko Okamoto"
date: "2025-09-24"
format: gfm
editor: visual
execute: 
  echo: true
---

## üñåÔ∏è Introduction to ggplot2

> ggplot2 is a system for declaratively creating graphics, based on [The Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0). You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.

#### *Load packages*

```{r}
# YOUR CODE HERE
```

## üîç Exploring the sample data

![](../imgs/sncf.png){fig-align="center" width="600"}

-   The data originally comes from SNCF, France's state-owned railway operator.
-   We'll use a modified version from [this repository](https://github.com/rfordatascience/tidytuesday/tree/main/data/2019/2019-02-26).

#### *Read the data*

```{r}
# YOUR CODE HERE
```

-   Reading in a CSV file with [`readr`](https://readr.tidyverse.org/) (part of the tidyverse) is a typical starting point for many analyses.

#### *Inspect the data dictionary to see the type and description of each variable*

| Variable                  | Type      | Description                     |
|---------------------------|-----------|---------------------------------|
| `year`                    | double    | Year of observation             |
| `month`                   | double    | Month of observation            |
| `service`                 | character | Type of train service           |
| `departure_station`       | character | Name of departure station       |
| `arrival_station`         | character | Name of arrival station         |
| `journey_time_avg`        | double    | Average journey time (min)      |
| `total_num_trips`         | double    | Total number of trips           |
| `avg_delay_all_departing` | double    | Average departure delay (min)   |
| `avg_delay_all_arriving`  | double    | Average arrival delay (min)     |
| `num_late_at_departure`   | double    | Number of trains departing late |
| `num_arriving_late`       | double    | Number of trains arriving late  |

```{r}
# YOUR CODE HERE
```

-   Each row summarizes information on trips from one station to another for a given year and month.
    -   The first row captures information on trips from **AIX EN PROVENCE TGV** (Aix-en-Provence) to **PARIS LYON** (Paris-Gare-de-Lyon) for **JANUARY 2015**.

    -   The last row captures information on trips from **ZURICH** to **PARIS LYON** for **NOVEMBER 2018**.

## 1Ô∏è‚É£ Histogram

#### *Visualize the distribution of average journey time*

```{r}
# YOUR CODE HERE
```

-   The distribution of average journey time is skewed to the right.
-   Creating a plot is like making a layer cake üéÇ
    -   Every plot starts with a `ggplot()` call. Inside, you tell R which data set to use.
    -   You set up aesthetics with `aes()`. This tells R how to map variables in your data to plot components (e.g., x-axis, y-axis, colours).
    -   You add layers with `geom_*()`. Each geom tells R what type of plot to draw (e.g., histogram, scatter plot, line plot).
    -   You connect the layers with `+`. This lets you build up the plot, piece by piece.

## 2Ô∏è‚É£ Scatter plot

#### *Visualize the relationship between average journey time and average arrival delay*

```{r}
# YOUR CODE HERE
```

-   It looks as though the variance of delay increases as the average journey time increases. For journeys that average \<1 hour, arrival delays seem to be \<10 minutes. Meanwhile, for journeys that average 5 hours, arrival delays seem to be \<30 minutes.

#### *Change the transparency of the points*

```{r}
# YOUR CODE HERE
```

#### *Change the size of the points*

```{r}
# YOUR CODE HERE
```

#### *Change the colour of the points*

```{r}
# YOUR CODE HERE
```

#### *Add a title and change the axis labels*

```{r}
# YOUR CODE HERE
```

## 3Ô∏è‚É£ Bar plot

![](../imgs/gare-du-nord.png){fig-align="center" width="600"}

-   Gare du Nord, officially Paris-Nord, is one of Paris' major terminus stations and the busiest railway station in Europe by total passenger traffic.

#### *Visualize the number of departures from Paris-Nord in 2015, by destination*

```{r}
# YOUR CODE HERE
```

#### *Create a horizontal bar plot*

```{r}
# YOUR CODE HERE
```

#### *Visualize the number of departures from Paris-Nord in 2015 and 2016, by destination*

```{r}
# YOUR CODE HERE
```

## 4Ô∏è‚É£ Changing colours

#### *Change the bar colours manually*

```{r}
# YOUR CODE HERE
```

-   Use `scale_fill_*()` for bar, box, and violin plots.
-   Use `scale_colour_*()` for scatter and line plots.

#### *Change the bar colours using the `RColorBrewer` package*

```{r}
# YOUR CODE HERE
```

## 5Ô∏è‚É£ Line plot

![](../imgs/brittany.png){fig-align="center" width="600"}

#### *Visualize how the monthly number of trips from Paris to Brest changes throughout the year*

```{r}
# YOUR CODE HERE
```

#### *Visualize how the monthly number of trips from Paris to multiple cities in Brittany changes throughout the year*

-   Force the y-axis to start at 0.
-   Add year-month labels to the x-axis and rotate them.
-   Apply a different [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html).

```{r}
# YOUR CODE HERE
```

-   Choose your scale function based on the type of data: `scale_*_continuous()` for numbers, `scale_*_discrete()` for categories, and `scale_*_date()` for dates.
-   Use `theme()` to adjust non-data elements of your plot like titles, labels, and grid lines.
    -   When combining it with a built-in theme like `theme_minimal()`, make sure to call the build-in theme first or else it may override the custom settings you specified with `theme()`.

## 6Ô∏è‚É£ Overlaying graphs

```{r}
# YOUR CODE HERE
```

## 7Ô∏è‚É£ Saving our masterpieces

```{r}
# YOUR CODE HERE
```

-   If you don't specify the `plot` argument, by default, the function will save the last plot displayed.

## ‚≠ê Other types of plots

#### *Create a box plot to visualize the distribution of the monthly number of trips from Paris-Gare-de-Lyon to each international destination*

```{r}
# YOUR CODE HERE
```

#### *Change one line of code to display the distributions as a violin plot*

```{r}
# YOUR CODE HERE
```

> While a [box plot](https://en.wikipedia.org/wiki/Box_plot) shows a summary statistics such as mean/median and interquartile ranges, the [violin plot](https://en.wikipedia.org/wiki/Violin_plot) shows the full distribution of the data. The violin plot can be used in multimodal data (more than one peak).

## ‚≠ê Laying out panels in a grid

#### *Visualize how the monthly number of trips from Paris to multiple cities in Brittany changes over time*

To make it easier to compare patterns across years, use faceting to create subplots (one for each year).

```{r}
# YOUR CODE HERE
```

## ‚≠ê Modify the theme

Theme elements are non-data components of a plot, which include things like the background colour, text size, font, and grid lines. These changes don't alter the underlying data; they only adjust the appearance of the plot. We've already seen how to modify the theme to change the angle of the axis labels. Now let's explore some of the other elements we can customize.

```{r}
# YOUR CODE HERE
```

-   I don't think this aesthetic makes the plot easier to read, but it does demonstrate just how customizable ggplot2 is ü§†

## üìö References

-   [From data to Viz \| Find the graphic you need (data-to-viz.com)](https://www.data-to-viz.com/)
-   [Be Awesome in ggplot2: A Practical Guide to be Highly Effective - R software and data visualization - Easy Guides - Wiki - STHDA](http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization)
-   [Function reference ‚Ä¢ ggplot2 (tidyverse.org)](https://ggplot2.tidyverse.org/reference/)
-   [Modify components of a theme --- theme ‚Ä¢ ggplot2 (tidyverse.org)](https://ggplot2.tidyverse.org/reference/theme.html)
