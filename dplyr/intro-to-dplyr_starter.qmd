---
title: "Introduction to dplyr"
author: "Reiko Okamoto"
date: "2025-09-24"
format: gfm
editor: visual
execute: 
  echo: true
---

## üëã Welcome to the tidyverse

### What is the tidyverse?

The [tidyverse](https://www.tidyverse.org/) is a collection of R packages for data science. Today, we will be using [`dplyr`](https://dplyr.tidyverse.org/) for data manipulation and [`ggplot2`](https://ggplot2.tidyverse.org/) for data visualization.

### Why learn it?

Many concepts you learn with the tidyverse (e.g., creating plots, filtering data) translate to other programming languages like Python and SQL. This foundation helps you pick up those languages more quickly later. The tidyverse also allows you analyze data in a transparent and reproducible way, so others can easily follow how you reached your conclusions.

### Keep in mind...

Please don't feel like you need to memorize everything! Even experienced data scientist don't know everything off the top of their heads. My main goal today is to pique your interest in using the tidyverse for data analysis.

## üêß Palmer penguins

![Artwork by [\@allison_horst](https://allisonhorst.com/allison-horst)](../imgs/penguins.png){fig-align="center" width="600"}

We'll use the `penguins` data set from the [`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/) package. It contains measurements for adult penguins observed in a group of islands off the coast of the Antarctic Peninsula. The data were collected and made available by Dr. Kristen Gorman and the Palmer Long-Term Ecological Research (LTER) program. This data set is concise but offers a diverse mix of data types and features, making it an excellent resource for learning the tidyverse.

#### *Load packages*

```{r}
# YOUR CODE HERE
```

-   Each time you start a new R session, you need to load the R packages that you want to use.

#### *Open the documentation*

```{r}
# YOUR CODE HERE
```

![Artwork by [\@allison_horst](https://allisonhorst.com/allison-horst)](../imgs/culmen_depth.png){fig-align="center" width="600"}

## 1Ô∏è‚É£ Get a "glimpse" of your data

#### *Inspect the data*

```{r}
# YOUR CODE HERE
```

-   How many rows does the data set have?
-   How many columns?
-   How many data types?
-   Are there any missing values?

## 2Ô∏è‚É£ Keep or drop columns

Sometimes, to keep our outputs more focused and easy to work with, we only keep the columns we care about. The [`select()`](https://dplyr.tidyverse.org/reference/select.html) function lets you choose which columns to keep or drop, using their names or types.

#### *Select one column by name*

```{r}
# YOUR CODE HERE
```

#### *Select multiple columns by name*

```{r}
# YOUR CODE HERE
```

#### *Select everything except certain columns*

```{r}
# YOUR CODE HERE
```

#### *Select columns that start with "bill"*

```{r}
# YOUR CODE HERE
```

-   Similar functions, such as `ends_with()` and `contains()`, are also available for selecting columns based on how their names end or whether they contain specific characters.

#### *Select numeric variables*

```{r}
# YOUR CODE HERE
```

## 3Ô∏è‚É£ Keep rows that match a condition

To keep only the observations that meet specific conditions, we can use the [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) function.

#### *Filter the data to keep only penguins belonging to the Gentoo species*

```{r}
# YOUR CODE HERE
```

#### *Filter the data to keep only penguins belonging to the Adelie species on Torgersen Island*

```{r}
# YOUR CODE HERE
```

-   The comma acts like an AND operator: both conditions must be `TRUE` for a row to be kept.

#### *Filter the data to keep penguins belonging to the Adelie or Gentoo species*

```{r}
# YOUR CODE HERE
```

-   The vertical bar is the OR operator: a row is kept if at least one condition is `TRUE`.

### ‚úèÔ∏è Exercise 1

a.  Select the `sex` and `year` columns from the data.
b.  Filter the data to keep only penguins whose bill length is greater than 40 mm.
c.  Filter the data to keep penguins on either Biscoe Island or Torgersen Island.

```{r}
# YOUR CODE HERE
```

## 4Ô∏è‚É£ Pipes

#### *First, filter the data to keep only penguins belonging to the Adelie species, then select columns that start with "bill"*

```{r}
# YOUR CODE HERE
```

-   This works, but nested functions can be difficult to understand because you have to read the code inside-out. This is how I look trying to read code with deep nesting...

![](../imgs/pingu-crying.jpg){fig-align="center" width="600"}

#### *Use the pipe to rewrite the code in a cleaner way*

Keyboard shortcut: **Ctrl/Cmd + Shift + M**

```{r}
# YOUR CODE HERE
```

-   The pipe allows us to pass the output of one function directly to the next. This makes our code easier to read because the operations flow left to right, just like English and French.

![](../imgs/pipe-illustration.png){fig-align="center" width="600"}

### ‚úèÔ∏è Exercise 2

a.  Using the pipe, filter the data to keep only female penguins, then select the `species` and `body_mass_g` columns.

```{r}
# YOUR CODE HERE
```

## 5Ô∏è‚É£ Create and modify columns

We can use the [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) function to derive new variables from existing ones.

#### *Create a new column by converting an existing one from grams to kilograms*

```{r}
# YOUR CODE HERE
```

#### *Create a column that classifies flipper length into two categories*

```{r}
# YOUR CODE HERE
```

#### *Create a column that classifies flipper length into three categories*

```{r}
# YOUR CODE HERE
```

-   Use [`if_else()`](https://dplyr.tidyverse.org/reference/if_else.html) when you only have two options. Use [`case_when()`](https://dplyr.tidyverse.org/reference/case_when.html) when you need to handle multiple conditions and return different values for each.

#### *Round values in multiple columns at the same time*

```{r}
# YOUR CODE HERE
```

-   Tips:
    -   If you use an existing variable name, `mutate()` will overwrite it.

    -   We can create several new columns at once by separating each definition with a comma inside `mutate()`.

## 6Ô∏è‚É£ Compute summary statistics

To understand the data better, we often look at summaries like averages, spread, or counts. The [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html) function helps us do that.

#### *Calculate the mean body mass for all penguins*

```{r}
# YOUR CODE HERE
```

## 7Ô∏è‚É£ Group by one or more variables

In data analysis, we often split the data into groups, apply a function to each group, and then combine the results. This is known as the split-apply-combine paradigm. The [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) function tells R how to split the data.

#### *Calculate the mean body mass for each species*

```{r}
# YOUR CODE HERE
```

-   A grouped data frame has all the properties of a regular data frame, but also includes information about the grouping structure. R treats each group as if it were a separate data frame, so operations within `summarise()` are applied to each group individually and then combined back together.

#### *Count the number of penguins on each island*

```{r}
# YOUR CODE HERE
```

#### *Calculate the mean and standard deviation of body mass for each combination of species and sex*

```{r}
# YOUR CODE HERE
```

-   You can compute multiple summary statistics in one `summarise()` call by separating each calculation with a comma.

#### *Remove grouping*

By default, when we group by multiple variables, `dplyr` reduces the grouping level by one after summarizing. We might want to remove all remaining grouping structure for subsequent operations (e.g., plotting).

```{r}
# YOUR CODE HERE
```

## 8Ô∏è‚É£ Sort and subset data

#### *Find the largest body mass*

1.  Use [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) to sort the data by `body_mass_g` in descending order.
2.  Use [`slice()`](https://dplyr.tidyverse.org/reference/slice.html) to select the first row (largest body mass).
3.  Use [`pull()`](https://dplyr.tidyverse.org/reference/pull.html) to extract the value as a numeric vector.

```{r}
# YOUR CODE HERE
```

-   Helper functions like `slice_max()` simplify row selection for common use cases.

### ‚úèÔ∏è Exercise 3

Perform the following tasks using the verbs we've learned, chaining everything together with the pipe:

-   Select the following columns: `island`, `species`, and `flipper_length_mm`.
-   Calculate the average and maximum flipper length for each combination of `island` and `species`.
-   Sort the results by average flipper length.

```{r}
# YOUR CODE HERE
```

![](../imgs/pingu-adventure.jpg){fig-align="center" width="600"}

Awesome work! You're ready to tackle new data adventures.

## ‚≠ê Lengthen and widen data

The [`tidyr`](https://tidyr.tidyverse.org/) package is another key component of the tidyverse. It focuses on reshaping data to ensure it's in the right format for analysis.

Data can be in a "long" format (more rows, fewer columns) or in a "wide" format (more columns, fewer rows).

By default, the `penguins` data set is arranged so that each row represents a penguin and each column contains a different measurement. But what if we wanted each observation to be a measurement rather than a penguin?

We can restructure the data to have the following columns:

-   `id`: penguin's unique identifier;
-   `measurement`: type of measurement; and
-   `value`: value of measurement.

#### *Make the data longer*

```{r}
# YOUR CODE HERE
```

#### *Reverse the pivot by making the data wider*

```{r}
# YOUR CODE HERE
```

## üìö Reference

| Function                | Description                                      |
|------------------------|-----------------------------------------------|
| `dplyr::glimpse()`      | Get a glimpse of your data                       |
| `dplyr::select()`       | Keep or drop columns using their names and types |
| `dplyr::filter()`       | Keep rows that match a condition                 |
| `dplyr::mutate()`       | Create, modify, and delete columns               |
| `dplyr::summarise()`    | Summarise each group down to one row             |
| `dplyr::group_by()`     | Group by one or more variables                   |
| `dplyr::count()`        | Count the observations in each group             |
| `dplyr::arrange()`      | Order rows using column values                   |
| `dplyr::slice()`        | Subset rows using their positions                |
| `dplyr::pull()`         | Extract a single column                          |
| `tidyr::pivot_longer()` | Pivot data from wide to long                     |
| `tidyr::pivot_wider()`  | Pivot data from long to wide                     |
